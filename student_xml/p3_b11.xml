<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../schema_3302.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<!--the second line in the document associates the schema, so be sure not to change it-->
<DOC>
    <docHead>
        <!--required header includes metadata about the assignment (title, author, version)-->
        <title>Project 3: Penetration Testing Edutainment</title>
        <author xml:id="b11">Seth Bakes</author>
        <version n="num_of_version" date="2016-01-01"/>
    </docHead>

    <blog_post>
        <background>
            <section_header>What is Penetration Testing?</section_header>
            <technical_principle n="1"> Penetration testing is what you might call ethical hacking.
                Now hacking is a large and arguably misused term, but it is the best term we have.
                Penetration testing involves an individual, team, or software, actively analysing a
                system for vulnerabilities. This takes can take many forms, which we will get into
                later, many of which are not what you might think of as "hacking". There is always a
                written consent by the party, almost always with a payment involved, making
                penetration testing a service, sought after by those looking to improve the security
                of whatever property or infrastructure they have. <!-- Insert cringy hacker image -->
                <misconception n="1">
                    <note type="peer" resp="s24">I think it could be beneficial to open with the
                        misconception of hacking. </note>"Hacking", the wildly used term that it is,
                    will be defined thus: "a person interfering with another system without
                    permission from the system owner". The first thought that comes to mind is
                    someone in a dark basement typing line after line into an arbitrary command
                    prompt. This media portrayal, while cool, is misleading. Lot of "hacking" and
                    most commonly seen cases of what most of us may call hacking, is more
                    appropriately scamming, or misleading a human into giving up their valuable
                    information. Actual attempts to penetrate a system often involve very methodical
                    approaches, not really the highspeed action that we see in movies. Successful
                    penetration of a system is what you would call genuine hacking, usually
                    accompanied with the stealing of sensitive information. </misconception>
                <!-- Insert examples: Steam forums, Sony Pictures, Team Viewer-->
            </technical_principle>
            <section_header> How do you "penetrate" a system?</section_header>
            <technical_principle n="2">The main purpose of penetration testing is to identify
                vulnerabilities. These vulnerabilities, are then tested, and a penetration tester
                usually offers a solution along with identifying the problem. Generally speaking a
                vulnerability is a security "hole". This means it offers a way for an outside entity
                to gain access into the system, this most commonly manifests as weak passwords, but
                can also take much more complex routes such as database interactions flaws. These
                vulnerabilities are exactly what penetration testers are hired to find. <!-- Image for SQL injection, Format String vulnerability-->
                <!-- More technical explaination of vulnerabilities -->
                <!-- Insert examples: heartbleed bug, flashplayer feedback exploit -->
            </technical_principle>
            <section_header> So what can you do with a vulnerability?</section_header>
            <technical_principle n="3'"> After gaining access to a system, you need to find or
                develop a way to take advantage of it. This is typically called an "exploit".
                Exploits allow you deliver a payload. Now this can be confusing but here is a great
                analogy: Think of a payload as a warhead, and an exploit as your propulsion system.
                Together you have a missile, but they are both rather useless alone. (credit to user
                "NULLZ" from security.stackexchange.com) <note type="peer" resp="s24">I'd suggest
                    using a 'ref' element here</note>.
                <!-- Insert payload & exploit diagram (from user "NULLZ")--> So a payload is
                software that uses an exploit to gain access to a system. This can take different
                forms, there are completely independent payloads, that you cannot interact with once
                injected into a system. A staged payload, for example, established a communication
                channel between the hacker and the targeted system. This kind of payload gives the
                penetration tester control over his program by feeding remote commands. Getting into
                why you would use different kinds of payloads is a bit beyond this blog post but it
                is mostly about what kind of system your using and any traces you leave behind for
                digital forensic investigation. </technical_principle>
            <technical_principle n="4"> Metasploit </technical_principle>
            <section_header> Penetration testing as a career</section_header>
        </background>
        <answer/>
        <sources/>
    </blog_post>

    <docReview>
        <reviewer type="peer" xml:id="s24"/>
        <report type="peer" resp="s24">
            <p> The project is focused on the work of penetration testers. Penetration testing is a
                form of pre-emptive security employed by companies in which they -- or more commonly
                a hired third party -- attempt to highlight security risks in the company's software
                by using publicly available tools to subvert the security features in place. By
                fixing any security deficiencies found through this method, the risk of having these
                exploits taken advantage of by malicious entities is minimized. <pb/>I found Seth's
                explanation of penetration testing to be very easy to understand. I have exposure to
                the computer science world, so while this likely helps my understanding, I believe
                even a non-informed reader with interest can understand the concepts being
                discussed. <pb/>What is not evident to me at the moment is where the article is
                heading. I assume that the purpose of the blog is to explain what penetration
                testing is, however if this is the 'answer' to the blog post, it seems to be
                discussed heavily in the 'background' section, leaving me to wonder what is planned
                for the 'answer' section. If my instinct on the direction of the post is correct, I
                would suggest front-loading the definitional misconception of hacking in addition to
                some historical instances of famous vulnerabilities (Heartbleed) or companies
                marketing bug-bounties (Google, facebook etc.). These subjects I believe support the
                atmospheric foundation for the discussion at hand without needing to explain in
                depth what the process of penetration testing entails. <pb/>A good approach to
                modularity seems to be underway in the post. As such I think the article lends
                itself to an effective use of the 'list a='roadmap'' type element. This is personal
                taste however, and is by no means mandatory. <pb/>Seth expressed concern that he may
                not be covering the subjects in enough depth. I struggled with the same concern when
                I was writing my blog entry, however as a reader I don't find myself wanting for a
                much more in-depth explanation. If this blog were tailored for a highly technical
                and informed audience, then it would likely be necessary, however our group's
                conception of the genre was one that should be accessible to the general public
                without too much googling of definitions being necessary. I believe the best way to
                bridge any gaps in knowledge would be to use the 'ref' element to give inline links
                to points brought up for those readers who might be interested in understanding the
                full technicality of a given point or term. <pb/>Although the project is still in
                its preliminary stages, it appears Seth has a good understanding of the most
                important structural tools made available by the schema. The topic is fitting and
                one that I think even non-computer science minded people would find highly
                engaging.<pb/>Lastly Seth mentioned he is still trying to find good analogies for
                vulnerabilities. To offer some examples he is free to use or work off of, would be:
                1) SYN-ACK Flooding : sending billions of letters to somebody's office when they're
                expecting only a few. Congestion and confusion ensues. 2) Buffer overflows : A goat
                in a pen on the side of a garden. The goat manages to escape the pen and can eat and
                rampage the garden at will. Except, instead of just a normal goat, this goat travels
                at the speed of light and in milliseconds can eat everything in the garden making it
                unrecognisable. Also, instead of being a normal goat, it is a
                speed-of-light-travelling-genius goat that knows how to plant vegetables. It can
                then plant the carrots where the beets had been. You're a blind and tactilely
                defunct farmer, so when you go to pick the beets you're picking carrots, but are
                none the wiser. <pb/>SQL Injection : A criminal who dresses up like a security
                officer at a major bank, allowing him to walk through the 'employees only' door and
                looting the bank.</p>
        </report>
        <reviewer type="instructor" xml:id="kgs"/>
        <report type="instructor" resp="#kgs">
            <p>Comments on assignment will appear here.</p>
        </report>
    </docReview>
</DOC>
